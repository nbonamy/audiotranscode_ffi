// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/audiotranscode_ffi.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class AudiotranscodeFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AudiotranscodeFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AudiotranscodeFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int transcode_to_mp3(
    ffi.Pointer<ffi.Char> src,
    ffi.Pointer<ffi.Char> dst,
    int bitrate,
  ) {
    return _transcode_to_mp3(
      src,
      dst,
      bitrate,
    );
  }

  late final _transcode_to_mp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('transcode_to_mp3');
  late final _transcode_to_mp3 = _transcode_to_mp3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int transcode_to_flac(
    ffi.Pointer<ffi.Char> src,
    ffi.Pointer<ffi.Char> dst,
    int samplerate,
    int bitspersample,
  ) {
    return _transcode_to_flac(
      src,
      dst,
      samplerate,
      bitspersample,
    );
  }

  late final _transcode_to_flacPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Int)>>('transcode_to_flac');
  late final _transcode_to_flac = _transcode_to_flacPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();
}
